{
  "name": "Ephemerals",
  "tagline": "A library for creating short-lived testing endpoints over container clusters. ",
  "body": "# Ephemerals\r\n\r\n[![Build Status](https://travis-ci.org/LivePersonInc/ephemerals.svg?branch=master)](https://travis-ci.org/LivePersonInc/ephemerals)\r\n[![Maven Central](https://img.shields.io/maven-central/v/com.liveperson.ephemerals/ephemerals-core.svg)](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.liveperson.ephemerals%22)\r\n\r\nEphemerals make it easy to setup test environment on-the-fly and let it scale with your container cluster. The main motivation behind Ephemerals is that whole test environment is launched and destroyed during test lifecycle. \r\n\r\nEphemerals takes care of deployment process of testing endpoints and initialization of test objects:\r\n\r\n![](https://github.com/LivePersonInc/ephemerals/raw/master/eph.png)\r\n\r\nEphemerals can be deployed on various cloud providers for creating use-and-throw instances of browsers, web services, databases or anything else than can expose a connection endpoint.\r\n\r\n## Prerequisites\r\n\r\nEphemeral objects will be deployed and launched on a container cluster using a cluster manager. Following cluster managers are currently supported:\r\n\r\n- Kubernetes\r\n\r\nFor this quickstart, you can create a Kubernetes cluster using following options:\r\n\r\n- Run a Kuberenetes cluster locally using Minikube. You can find a detailed [tutorial here](http://blog.kubernetes.io/2016/07/minikube-easily-run-kubernetes-locally.html) on how to install and use Minikube.\r\n- Opening an account on [Google Cloud Platform (GCP)](https://cloud.google.com). GCP and its [Container Engine(GKE)](https://cloud.google.com/container-engine/) use Kubernetes to manage and orchestrate containers in the cluster. Follow this [tutorial](https://deis.com/blog/2016/first-kubernetes-cluster-gke/) to spinup your first Kubernetes cluster on GKE.\r\n\r\n## Quickstart\r\n\r\nFor this quickstart, we will create a simple Junit test which will launch a Selenium standalone server using Kubernetes and initialize a RemoteWebDriver instance . We will assume that you already have a Kubernetes cluster and it's ready to use.\r\n\r\nFirst, add below Maven dependencies:\r\n\r\n```xml\r\n<dependency>\r\n        <groupId>com.liveperson.ephemerals</groupId>\r\n        <artifactId>ephemerals-core</artifactId>\r\n        <version>${latest.version}</version>\r\n</dependency>\r\n<dependency>\r\n        <groupId>com.liveperson.ephemerals</groupId>\r\n        <artifactId>ephemerals-module-selenium</artifactId>\r\n        <version>${latest.version}</version>\r\n</dependency>\r\n<dependency>\r\n        <groupId>com.liveperson.ephemerals</groupId>\r\n        <artifactId>ephemerals-provider-kubernetes</artifactId>\r\n        <version>${latest.version}</version>\r\n</dependency>\r\n```\r\n\r\nInitialize FireFox Selenium ephemeral instance and set Kubernetes cluster configuration using Junit rule:\r\n\r\n```java\r\n@Rule\r\npublic EphemeralResource<RemoteWebDriver> seleniumResource = new EphemeralResource(\r\nnew SeleniumEphemeral.Builder(KubernetesEphemeral.create(KUBERNETES_HOST,KUBERNETES_USERNAME,KUBERNETES_PASSWORD))\r\n                .withDesiredCapabilities(DesiredCapabilities.firefox())\r\n        .build());\r\n```\r\n\r\nGet RemoteWebDriver instance and do some stuff using WebDriver API:\r\n\r\n```java\r\n@Test\r\npublic void test() throws IOException {\r\n\r\n        RemoteWebDriver remoteWebDriver = seleniumResource.get();\r\n        remoteWebDriver.get(\"http://yahoo.com\");\r\n        Assert.assertNotNull(remoteWebDriver.findElementById(\"uh-logo\"));\r\n\r\n}\r\n```\r\n\r\nFor more examples, see [here](https://github.com/LivePersonInc/ephemerals/tree/master/examples)\r\n\r\n## Documentation\r\n\r\nSee the [Wiki](https://github.com/LivePersonInc/ephemerals/wiki/) for documentation and examples.\r\n\r\n## Features\r\n\r\n#### Tests Integration\r\n\r\nEphemerals can be integrated into system tests, integration and end-to-end tests to programmatically create required environment entities from developer's test code.\r\n\r\n#### Plug-able Cluster Systems\r\n \r\nEphemerals were built to support multiple cluster management systems (Ephemeral's Deployment Providers). For example, you can switch from Kubernetes to Mesos almost transparently.\r\n\r\n#### Cluster-based Scaling\r\n\r\nEphemerals can scale according to your servers cluster resources. The amount of parallel Ephemerals instances depends only on your cluster's nodes capacity.\r\n\r\n#### Cloud Platforms Support\r\n\r\nEphemerals can be used with any cloud computing platform (Google Cloud, AWS, etc..), given it supports one of our Deployment Providers.\r\nA perfect use-case would be using Ephemerals with Google Cloud Platform and its GKE, which is based on Kubernetes.\r\n\r\n\r\n## Build\r\n\r\nMaven is used as a build system. In order to produce a package, run maven command `mvn clean package -DskipTests`. \r\n\r\nTests can be executed using command `mvn test`.\r\n\r\n## License\r\n\r\nMIT",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}